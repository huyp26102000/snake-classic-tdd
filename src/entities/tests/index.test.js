import Snake from "../snake";
import Gui from "../gui";
import { GameOverError } from "../../utils/errors";
import Cell from "../cell";

describe("Testing snake", () => {
  it("should create snake with 1 cell", () => {
    const snake = new Snake();
    expect(snake.cells.length).toEqual(1);
  });
  it("should create snake at location 9x9", () => {
    const snake = new Snake();
    expect(snake.cells[0]).toEqual({
      col: 9,
      row: 9,
    });
  });
  it("should move snake to east 1 unit", () => {
    const snake = new Snake();
    snake.goEast();
    expect(snake.cells[0]).toEqual({
      col: 10,
      row: 9,
    });
    expect(snake.getLength()).toEqual(1);
  });
  it("should move snake to west 1 unit", () => {
    const snake = new Snake();
    snake.goNorth();
    snake.goWest();
    expect(snake.cells[0]).toEqual({
      col: 8,
      row: 8,
    });
    expect(snake.getLength()).toEqual(1);
  });
  it("should move snake north 1 unit", () => {
    const snake = new Snake();
    snake.goNorth();
    expect(snake.cells[0]).toEqual({
      col: 9,
      row: 8,
    });
    expect(snake.getLength()).toEqual(1);
  });
  it("should move snake to south 1 unit", () => {
    const snake = new Snake();
    snake.goSouth();
    expect(snake.cells[0]).toEqual({
      col: 9,
      row: 10,
    });
    expect(snake.getLength()).toEqual(1);
  });
  it("should display no snake", () => {
    const snake = new Snake();
    const gui = Gui.display(null);
    expect(gui).toEqual(
      `
00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09....................
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19....................`.trim()
    );
  });

  it("should display snake", () => {
    const snake = new Snake();
    const gui = Gui.display(snake);
    expect(gui).toEqual(
      `
00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09.........x..........
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19....................`.trim()
    );
  });
  it("should display snake inline snapshot", () => {
    const snake = new Snake();
    const gui = Gui.display(snake);
    expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09.........x..........
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
  });

  it("throw game over exception if hit wall north", () => {
    const snake = new Snake();
    "123456789".split("").forEach((index) => snake.goNorth());
    expect(() => snake.goNorth()).toThrow(GameOverError);
  });
  it("throw game over exception if hit wall west", () => {
    const snake = new Snake();
    snake.goNorth();
    "123456789".split("").forEach((index) => snake.goWest());
    expect(() => snake.goWest()).toThrow(GameOverError);
  });
  it("throw game over exception if hit wall east", () => {
    const snake = new Snake();
    "0123456789".split("").forEach((index) => snake.goEast());
    expect(() => snake.goEast()).toThrow(GameOverError);
  });
  it("throw game over exception if hit wall south", () => {
    const snake = new Snake();
    "0123456789".split("").forEach((index) => snake.goSouth());
    expect(() => snake.goSouth()).toThrow(GameOverError);
  });

  it("it should check is cell not belong to snake", () => {
    const snake = new Snake();
    snake.addNode(new Cell(9, 10));
    const testCell = new Cell(8, 10);
    expect(snake.checkCellIsSnake(testCell)).toEqual(false);
  });

  it("it should check is cell belong to snake", () => {
    const snake = new Snake();
    snake.addNode(new Cell(9, 10));
    const testCell = new Cell(9, 10);
    expect(snake.checkCellIsSnake(testCell)).toEqual(true);
  });

  it("snake should show snake with 2 node", () => {
    const snake = new Snake();
    snake.addNode(new Cell(9, 10));

    const gui = Gui.display(snake);
    expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09.........x..........
10.........x..........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
  });
});

it("should it add some cells", () => {
  const snake = new Snake();
  snake.addNodes([
    new Cell(9, 10),
    new Cell(9, 11),
    new Cell(9, 12),
    new Cell(9, 13),
  ]);
  const gui = Gui.display(snake);
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09.........x..........
10.........x..........
11.........x..........
12.........x..........
13.........x..........
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("snake with 2 node should move right", () => {
  const snake = new Snake();
  snake.addNode(new Cell(9, 10));

  snake.goEast();
  const gui = Gui.display(snake);
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09....................
10.........xx.........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it.skip("snake can check is the head out of board", () => {
  const snake = new Snake();
  snake.addNode(new Cell(9, 10));

  snake.goWest();
  const gui = Gui.display(snake);
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09........x...........
10........x...........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("should throw error when cell out of board", () => {
  const snake = new Snake();
  const cell_1 = new Cell(-1, 19);
  const cell_2 = new Cell(1, 20);
  const cell_3 = new Cell(20, 19);
  const cell_4 = new Cell(19, -1);
  expect(() => snake.checkWall(cell_1)).toThrow(GameOverError);
  expect(() => snake.checkWall(cell_2)).toThrow(GameOverError);
  expect(() => snake.checkWall(cell_3)).toThrow(GameOverError);
  expect(() => snake.checkWall(cell_4)).toThrow(GameOverError);
});

it("shoude create new head for snake", () => {
  const snake = new Snake();
  const newHeadNorth = new Cell(9, 8);
  const newHeadSouth = new Cell(9, 10);
  const newHeadWest = new Cell(8, 9);
  const newHeadEast = new Cell(10, 9);
  expect(snake.makeHead("north")).toEqual(newHeadNorth);
  expect(snake.makeHead("south")).toEqual(newHeadSouth);
  expect(snake.makeHead("west")).toEqual(newHeadWest);
  expect(snake.makeHead("east")).toEqual(newHeadEast);
});

it("should east right on initialize", () => {
  const snake = new Snake();
  expect(snake.direction).toEqual("east");
});

it("should move continue when don't have direction", () => {
  const snake = new Snake();
  snake.addNode(new Cell(9, 10));

  snake.move();
  const gui = Gui.display(snake);
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09....................
10.........xx.........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("should update direction each time snake move", () => {
  const snake = new Snake();
  snake.goSouth();
  expect(snake.direction).toEqual("south");
  snake.goWest();
  expect(snake.direction).toEqual("west");
  snake.goNorth();
  expect(snake.direction).toEqual("north");
  snake.goEast();
  expect(snake.direction).toEqual("east");
});

it("should not reverse move when direction is east", () => {
  const snake = new Snake();
  snake.addNode(new Cell(10, 9));

  snake.goWest();
  const gui = Gui.display(snake);
  expect(snake.direction).toEqual("east");
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09.........xx.........
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("should not reverse move when direction is west", () => {
  const snake = new Snake();
  snake.addNode(new Cell(10, 9));
  snake.goNorth()
  snake.goWest();
  snake.goEast();
  const gui = Gui.display(snake);
  expect(snake.direction).toEqual("west");
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08.........xx.........
09....................
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("should not reverse move when direction is north", () => {
  const snake = new Snake();
  snake.addNode(new Cell(10, 9));
  snake.goNorth()
  snake.goSouth();
  const gui = Gui.display(snake);
  expect(snake.direction).toEqual("north");
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08..........x.........
09..........x.........
10....................
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it("should not reverse move when direction is south", () => {
  const snake = new Snake();
  snake.addNode(new Cell(10, 9));
  snake.goSouth();
  snake.goNorth()
  const gui = Gui.display(snake);
  expect(snake.direction).toEqual("south");
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09..........x.........
10..........x.........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});

it.skip("should eat some", () => {
  const snake = new Snake();
  snake.addNode(new Cell(10, 9));
  snake.goSouth();
  snake.goNorth()
  const gui = Gui.display(snake);
  expect(snake.direction).toEqual("south");
  expect(gui).toMatchInlineSnapshot(`
"00....................
01....................
02....................
03....................
04....................
05....................
06....................
07....................
08....................
09..........x.........
10..........x.........
11....................
12....................
13....................
14....................
15....................
16....................
17....................
18....................
19...................."
`);
});
